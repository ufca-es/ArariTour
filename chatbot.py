# chatbot.py

import random
from collections import Counter

# Arquivos de armazenamento
arquivo_aprendizado = "aprendizado.txt"
arquivo_historico = "historico.txt"
arquivo_relatorio = "relatorio.txt"

# Estat√≠sticas
total_interacoes = 0
contador_personalidade = Counter()
contador_perguntas = Counter()
ultima_resposta = None

# Personalidades dispon√≠veis
personalidades = {1: "Formal", 2: "Engra√ßado", 3: "Regional"}

# Dicion√°rio de respostas
respostas = {
    "Formal": {
        ("pontos tur√≠sticos", "atra√ß√µes", "lugares para visitar", "locais", "roteiro"): [
            "Os pontos tur√≠sticos mais conhecidos da regi√£o s√£o: Chapada do Araripe, Geopark Araripe e Museu de Paleontologia em Santana do Cariri.",
            "Voc√™ pode visitar a Chapada do Araripe, um dos lugares mais ic√¥nicos, al√©m do Geopark e o famoso Museu de Paleontologia.",
            "Destacam-se ainda as trilhas ecol√≥gicas da Chapada, os mirantes naturais e o Museu de Paleontologia de Santana do Cariri."
        ],
        ("hospedagem", "hotel", "hot√©is", "pousada", "pousadas",
         "alojamento", "alojamentos", "acomoda√ß√£o", "acomoda√ß√µes",
         "estadia"): [
            "A maior quantidade de op√ß√µes encontra-se nas cidades de Juazeiro do Norte, Barbalha e Crato, desde hot√©is econ√¥micos at√© pousadas familiares.",
            "Voc√™ encontrar√° hospedagem variada no Cariri, desde hot√©is confort√°veis at√© pousadas aconchegantes nas principais cidades.",
            "Existem op√ß√µes de hospedagem pr√≥ximas aos principais pontos tur√≠sticos, tanto para viagens de neg√≥cios quanto de lazer."
        ],
        ("eventos", "festas", "shows", "programa√ß√£o"): [
            "Dois eventos populares: Festival Expocrato e Festa do Pau da Bandeira.",
            "Entre os eventos mais tradicionais, destacam-se a Festa do Pau da Bandeira em Barbalha e o Festival Expocrato, refer√™ncia musical da regi√£o.",
            "Eventos como o Festival Expocrato e a Festa do Pau da Bandeira atraem visitantes de v√°rias partes do Brasil."
        ]
    },
    "Engra√ßado": {
        ("pontos tur√≠sticos", "atra√ß√µes", "lugares para visitar", "locais", "roteiro"): [
            "Se liga! üì∏ Chapada do Araripe, Geopark e Museu dos Dinossauros. Selfie garantida! ü¶ñüòÇ",
            "Quer ver dinossauro de perto? Vai no museu! Quer uma vista de tirar o f√¥lego? Chapada do Araripe! üåÑ",
            "Rol√™ garantido: Chapada pra foto, Geopark pra aventura e museu pra dar um 'oi' pros dinossauros! ü¶ïüéí"
        ],
        ("hospedagem", "hotel", "hot√©is", "pousada", "pousadas",
         "alojamento", "alojamentos", "acomoda√ß√£o", "acomoda√ß√µes",
         "estadia"): [
            "Tem de tudo: hotel chique, pousada aconchegante... s√≥ n√£o vale dormir na pra√ßa üòÖ",
            "Se quiser luxo, tem hotel. Se quiser economia, tem pousadinha. S√≥ cuidado com as redes de dormir, que vicia! üõèÔ∏èüòÇ",
            "Op√ß√£o √© o que n√£o falta! Desde hotel cinco estrelas at√© aquele quartinho que parece casa da v√≥ üëµ‚ú®"
        ],
        ("eventos", "festas", "shows", "programa√ß√£o"): [
            "Dois rol√™s que bombam: üéâ Festival Expocrato e Festa do Pau da Bandeira. Forr√≥, f√© e alegria! üçª",
            "Quer festa? Pau da Bandeira √© f√© e tradi√ß√£o. Quer m√∫sica? Expocrato √© o 'LollaPalooza' do Cariri! üé∂üòÇ",
            "No Cariri a galera n√£o brinca: Expocrato e Pau da Bandeira s√£o praticamente feriado extra! üéä"
        ]
    },
    "Regional": {
        ("pontos tur√≠sticos", "atra√ß√µes", "lugares para visitar", "locais", "roteiro"): [
            "√îxente, cabra! Tu tem que conhecer a Chapada do Araripe, o Geopark e o Museu dos Dinossauros. √â de encher os olhos, visse?",
            "Na Chapada do Araripe tu v√™ a natureza bonita, no Geopark tu aprende e no museu tu encontra os bichim antigos! ü¶ñ",
            "Ave Maria! Chapada, Geopark e Museu dos Dinossauros s√£o a cara do Cariri. Tem que ir, homi!"
        ],
        ("hospedagem", "hotel", "hot√©is", "pousada", "pousadas",
         "alojamento", "alojamentos", "acomoda√ß√£o", "acomoda√ß√µes",
         "estadia"): [
            "Tem op√ß√£o pra todo bolso, meu rei! Em Juazeiro, Crato e Barbalha tem hotel e pousada que √© um aconchego s√≥.",
            "Se quiser ficar bem hospedado, v√° pra Juazeiro, Crato ou Barbalha, que l√° tem cama boa at√© demais. üò¥",
            "Oxente, aqui √© assim: tem hospedagem pra quem vem s√≥ passear e at√© pra quem quer morar uns dias no Cariri!"
        ],
        ("eventos", "festas", "shows", "programa√ß√£o"): [
            "Dois dos festejos mais arretados: Festival Expocrato e Festa do Pau da Bandeira. √â forr√≥ e alegria que s√≥ a mol√©stia!",
            "Na Festa do Pau da Bandeira o povo vai na f√©, e no Expocrato vai no forr√≥. √â alegria garantida, cabra!",
            "Visse? O Cariri ferve na √©poca do Pau da Bandeira e do Expocrato. O povo n√£o perde por nada!"
        ]
    }
}

# --- Fun√ß√µes principais do chatbot para uso na interface ---

def responder(pergunta_usuario, estilo):
    global ultima_resposta, total_interacoes

    palavras_usuario = pergunta_usuario.lower().split()
    contador_perguntas[pergunta_usuario] += 1
    contador_personalidade[estilo] += 1
    total_interacoes += 1

    for chaves in respostas[estilo]:
        for palavra in palavras_usuario:
            if any(palavra in c.lower() for c in (chaves if isinstance(chaves, tuple) else (chaves,))):
                valor = respostas[estilo][chaves]
                if not isinstance(valor, list):
                    valor = [valor]
                    respostas[estilo][chaves] = valor
                possiveis = valor[:]
                if ultima_resposta in possiveis and len(possiveis) > 1:
                    possiveis.remove(ultima_resposta)
                resposta_bot = random.choice(possiveis)
                ultima_resposta = resposta_bot
                salvar_historico(pergunta_usuario, resposta_bot)
                return resposta_bot

    return None  # N√£o encontrou resposta

def ensinar(estilo, pergunta_usuario, nova_resposta):
    if pergunta_usuario in respostas[estilo]:
        if isinstance(respostas[estilo][pergunta_usuario], list):
            respostas[estilo][pergunta_usuario].append(nova_resposta)
        else:
            respostas[estilo][pergunta_usuario] = [
                respostas[estilo][pergunta_usuario],
                nova_resposta
            ]
    else:
        respostas[estilo][pergunta_usuario] = [nova_resposta]

    salvar_aprendizado(estilo, pergunta_usuario, nova_resposta)
    salvar_historico(pergunta_usuario, nova_resposta)

# --- Fun√ß√µes de suporte (salvamento de dados) ---

def salvar_aprendizado(estilo, palavra_chave, resposta):
    with open(arquivo_aprendizado, "a", encoding="utf-8") as arq:
        arq.write(f"{estilo}|{palavra_chave}|{resposta}\n")

def salvar_historico(pergunta, resposta):
    with open(arquivo_historico, "a", encoding="utf-8") as arq:
        arq.write(f"Pergunta: {pergunta} | Resposta: {resposta}\n")
